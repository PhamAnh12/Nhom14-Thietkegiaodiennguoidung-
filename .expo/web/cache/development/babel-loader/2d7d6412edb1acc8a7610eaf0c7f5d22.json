{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"F:\\\\Projects\\\\App\\\\screens\\\\ExercisesScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Button } from 'react-native-paper';\nimport Question from \"../components/Question\";\nimport Solution from \"../components/Solution\";\nimport Card from \"../components/Card\";\nimport questions from \"../components/questions\";\nexport default function ExercisesScreen() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      checkedAnswers = _useState2[0],\n      setCheckedAnswers = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isSubmitAnswer = _useState4[0],\n      setSubmitAnswer = _useState4[1];\n\n  var answers = questions.map(function (question) {\n    return _objectSpread({}, question, {\n      choosedOption: ''\n    });\n  });\n\n  var handleAnswer = function handleAnswer(title, checked) {\n    answers.forEach(function (answer) {\n      if (answer.title === title) {\n        answer.choosedOption = checked;\n      }\n    });\n    console.log('Exercise Screen: ' + title + ' ' + checked);\n    console.log(answers);\n    setCheckedAnswers(answers);\n  };\n\n  if (!isSubmitAnswer) {\n    return React.createElement(View, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }\n    }, React.createElement(FlatList, {\n      data: questions,\n      renderItem: function renderItem(_ref) {\n        var item = _ref.item;\n        return React.createElement(Card, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 25\n          }\n        }, React.createElement(Question, {\n          question: item,\n          onAnswer: handleAnswer,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 29\n          }\n        }));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }\n    }), React.createElement(Button, {\n      title: \"Submit\",\n      onPress: function onPress() {\n        setSubmitAnswer(true);\n      },\n      style: styles.button,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }\n    }, \"Submit\"));\n  }\n\n  return React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, React.createElement(FlatList, {\n    data: checkedAnswers,\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      return React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }\n      }, React.createElement(Solution, {\n        solution: item,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 25\n        }\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }), React.createElement(Button, {\n    title: \"Redo\",\n    onPress: function onPress() {\n      return setSubmitAnswer(false);\n    },\n    style: styles.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  button: {\n    color: '#3F448C',\n    paddingVertical: '5px'\n  }\n});","map":{"version":3,"sources":["F:/Projects/App/screens/ExercisesScreen.js"],"names":["React","useState","Button","Question","Solution","Card","questions","ExercisesScreen","checkedAnswers","setCheckedAnswers","isSubmitAnswer","setSubmitAnswer","answers","map","question","choosedOption","handleAnswer","title","checked","forEach","answer","console","log","item","styles","button","StyleSheet","create","color","paddingVertical"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport { FlatList, TouchableOpacity, View, StyleSheet } from 'react-native'\r\nimport { Button } from 'react-native-paper'\r\nimport Question from '../components/Question'\r\nimport Solution from '../components/Solution'\r\nimport Card from '../components/Card'\r\nimport questions from '../components/questions'\r\n\r\nexport default function ExercisesScreen(){\r\n    const [checkedAnswers, setCheckedAnswers] = useState([])\r\n    const [isSubmitAnswer, setSubmitAnswer] = useState(false)\r\n\r\n    const answers = questions.map((question) => {\r\n        return {...question, choosedOption: ''}\r\n    })\r\n    const handleAnswer = (title, checked) => {\r\n        answers.forEach((answer) => {\r\n            if(answer.title === title){\r\n                answer.choosedOption = checked\r\n            }\r\n        })\r\n        console.log('Exercise Screen: '+title+ ' ' +checked)\r\n        console.log(answers)\r\n        setCheckedAnswers(answers)\r\n    }\r\n    \r\n    if(!isSubmitAnswer){\r\n        return(\r\n            <View>\r\n                <FlatList \r\n                    data = {questions}\r\n                    renderItem = {({item}) =>\r\n                        <Card>\r\n                            <Question question={item} onAnswer={handleAnswer}/>    \r\n                        </Card>\r\n                    }\r\n                />\r\n                <Button \r\n                    title='Submit' \r\n                    onPress={() => {setSubmitAnswer(true)}}\r\n                    style={styles.button}\r\n                >\r\n                Submit\r\n                </Button>   \r\n            </View>\r\n        )\r\n    }\r\n    return(\r\n        <View>\r\n            <FlatList \r\n                data = {checkedAnswers}\r\n                renderItem = {({item}) =>\r\n                    <Card>\r\n                        <Solution solution={item}/>    \r\n                    </Card>\r\n                }\r\n            />\r\n            <Button \r\n                title='Redo' \r\n                onPress={() => setSubmitAnswer(false)}\r\n                style={styles.button}\r\n            />     \r\n        </View>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    button: {\r\n        color: '#3F448C',\r\n        paddingVertical: '5px'\r\n    }\r\n})"]},"metadata":{},"sourceType":"module"}