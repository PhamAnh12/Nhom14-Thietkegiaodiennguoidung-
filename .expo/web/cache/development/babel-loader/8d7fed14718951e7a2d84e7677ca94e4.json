{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"F:\\\\Projects\\\\App\\\\screens\\\\ExercisesScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Question from \"../components/Question\";\nimport Card from \"../components/Card\";\nimport questions from \"../components/questions\";\nimport SolutionScreen from \"./SolutionScreen\";\nexport default function ExercisesScreen() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isSubmitAnswer = _useState2[0],\n      setSubmitAnswer = _useState2[1];\n\n  var answers = questions.map(function (question) {\n    return _objectSpread({}, question, {\n      choosedOption: ''\n    });\n  });\n\n  var handleAnswer = function handleAnswer(title, checked) {\n    answers.forEach(function (answer) {\n      if (answer.title === title) {\n        answer.choosedOption = checked;\n      }\n    });\n    console.log('Exercise Screen: ' + title + ' ' + checked);\n    console.log(answers);\n  };\n\n  if (isSubmitAnswer) {\n    return React.createElement(View, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }\n    }, React.createElement(FlatList, {\n      data: questions,\n      renderItem: function renderItem(_ref) {\n        var item = _ref.item;\n        return React.createElement(Card, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 25\n          }\n        }, React.createElement(Question, {\n          question: item,\n          onAnswer: handleAnswer,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 29\n          }\n        }));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }\n    }), React.createElement(Button, {\n      title: \"Submit\",\n      onPress: function onPress() {\n        return setSubmitAnswer(true);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }\n    }));\n  }\n\n  return React.createElement(SolutionScreen, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  });\n}","map":{"version":3,"sources":["F:/Projects/App/screens/ExercisesScreen.js"],"names":["React","useState","Question","Card","questions","SolutionScreen","ExercisesScreen","isSubmitAnswer","setSubmitAnswer","answers","map","question","choosedOption","handleAnswer","title","checked","forEach","answer","console","log","item"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;AAEA,OAAOC,QAAP;AACA,OAAOC,IAAP;AACA,OAAOC,SAAP;AACA,OAAOC,cAAP;AAEA,eAAe,SAASC,eAAT,GAA0B;AAAA,kBAEKL,QAAQ,CAAC,KAAD,CAFb;AAAA;AAAA,MAE9BM,cAF8B;AAAA,MAEdC,eAFc;;AAGrC,MAAMC,OAAO,GAAGL,SAAS,CAACM,GAAV,CAAc,UAACC,QAAD,EAAc;AACxC,6BAAWA,QAAX;AAAqBC,MAAAA,aAAa,EAAE;AAApC;AACH,GAFe,CAAhB;;AAGA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAQC,OAAR,EAAoB;AACrCN,IAAAA,OAAO,CAACO,OAAR,CAAgB,UAACC,MAAD,EAAY;AACxB,UAAGA,MAAM,CAACH,KAAP,KAAiBA,KAApB,EAA0B;AACtBG,QAAAA,MAAM,CAACL,aAAP,GAAuBG,OAAvB;AACH;AACJ,KAJD;AAKAG,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAoBL,KAApB,GAA2B,GAA3B,GAAgCC,OAA5C;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYV,OAAZ;AACH,GARD;;AASA,MAAGF,cAAH,EAAkB;AACd,WACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,QAAD;AACI,MAAA,IAAI,EAAIH,SADZ;AAEI,MAAA,UAAU,EAAI;AAAA,YAAEgB,IAAF,QAAEA,IAAF;AAAA,eACV,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,QAAD;AAAU,UAAA,QAAQ,EAAEA,IAApB;AAA0B,UAAA,QAAQ,EAAEP,YAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CADU;AAAA,OAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EASI,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,QAAd;AAAuB,MAAA,OAAO,EAAE;AAAA,eAAML,eAAe,CAAC,IAAD,CAArB;AAAA,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATJ,CADJ;AAaH;;AACD,SACI,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAGH","sourcesContent":["import React, { useState } from 'react'\r\nimport { FlatList, Button, View } from 'react-native'\r\nimport Question from '../components/Question'\r\nimport Card from '../components/Card'\r\nimport questions from '../components/questions'\r\nimport SolutionScreen from './SolutionScreen'\r\n\r\nexport default function ExercisesScreen(){\r\n    // const [answers, setAnswers] = useState([])\r\n    const [isSubmitAnswer, setSubmitAnswer] = useState(false)\r\n    const answers = questions.map((question) => {\r\n        return {...question, choosedOption: ''}\r\n    })\r\n    const handleAnswer = (title, checked) => {\r\n        answers.forEach((answer) => {\r\n            if(answer.title === title){\r\n                answer.choosedOption = checked\r\n            }\r\n        })\r\n        console.log('Exercise Screen: '+title+ ' ' +checked)\r\n        console.log(answers)\r\n    }\r\n    if(isSubmitAnswer){\r\n        return(\r\n            <View>\r\n                <FlatList \r\n                    data = {questions}\r\n                    renderItem = {({item}) =>\r\n                        <Card>\r\n                            <Question question={item} onAnswer={handleAnswer}/>    \r\n                        </Card>\r\n                    }\r\n                />\r\n                <Button title='Submit' onPress={() => setSubmitAnswer(true)}/>    \r\n            </View>\r\n        )\r\n    }\r\n    return(\r\n        <SolutionScreen />        \r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}