{"ast":null,"code":"var _jsxFileName = \"F:\\\\Projects\\\\App\\\\screens\\\\ExplanationsScreen.js\";\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Unit1 from \"../components/Unit1\";\nexport default function ExplanationsScreen() {\n  var displayText = function displayText(text) {\n    if (text.includes('<b>')) {\n      return React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9,\n          columnNumber: 13\n        }\n      }, text.split('<b>').map(function (value, index) {\n        return index % 2 == 0 ? React.createElement(Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 12,\n            columnNumber: 25\n          }\n        }, value) : React.createElement(Text, {\n          style: styles.bold,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 13,\n            columnNumber: 25\n          }\n        }, value);\n      }));\n    } else if (text.includes('<i>')) {\n      return React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 13\n        }\n      }, text.split('<i>').map(function (value, index) {\n        return index % 2 == 0 ? React.createElement(Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 25\n          }\n        }, value) : React.createElement(Text, {\n          style: styles.italic,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 25\n          }\n        }, value);\n      }));\n    } else if (text.includes('<u>')) {\n      return React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }\n      }, text.split('<u>').map(function (value, index) {\n        return index % 2 == 0 ? React.createElement(Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 25\n          }\n        }, value) : React.createElement(Text, {\n          style: styles.underline,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 25\n          }\n        }, value);\n      }));\n    } else return React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }\n    }, text);\n  };\n\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, React.createElement(FlatList, {\n    data: Unit1,\n    renderItem: {\n      item: item\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }), displayText('This is <b>bold<b> text and another <b>bold<b> text.'), displayText('This is <i>italic<i> text.'), displayText('This is <u>underlined<u> text.'));\n}\nvar styles = StyleSheet.create({\n  bold: {\n    fontWeight: 'bold'\n  },\n  italic: {\n    fontStyle: 'italic'\n  },\n  underline: {\n    textDecorationLine: 'underline'\n  }\n});","map":{"version":3,"sources":["F:/Projects/App/screens/ExplanationsScreen.js"],"names":["React","Unit1","ExplanationsScreen","displayText","text","includes","split","map","value","index","styles","bold","italic","underline","flex","alignItems","justifyContent","item","StyleSheet","create","fontWeight","fontStyle","textDecorationLine"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport {View, Text, FlatList, StyleSheet} from 'react-native'\r\nimport Unit1 from '../components/Unit1'\r\n\r\nexport default function ExplanationsScreen(){\r\n    const displayText = (text) => {\r\n        if(text.includes('<b>')){\r\n        return(\r\n            <Text>\r\n                {text.split('<b>').map((value, index) => {\r\n                    return (index % 2 == 0) ? \r\n                        <Text>{value}</Text> :\r\n                        <Text style={styles.bold}>{value}</Text>\r\n                })}\r\n            </Text>\r\n        )}\r\n        else if(text.includes('<i>')){\r\n        return(\r\n            <Text>\r\n                {text.split('<i>').map((value, index) => {\r\n                    return (index % 2 == 0) ? \r\n                        <Text>{value}</Text> :\r\n                        <Text style={styles.italic}>{value}</Text>\r\n                })}\r\n            </Text>\r\n        )}\r\n        else if(text.includes('<u>')){\r\n        return(\r\n            <Text>\r\n                {text.split('<u>').map((value, index) => {\r\n                    return (index % 2 == 0) ? \r\n                        <Text>{value}</Text> :\r\n                        <Text style={styles.underline}>{value}</Text>\r\n                })}\r\n            </Text>\r\n        )}\r\n        else \r\n        return(\r\n            <Text>{text}</Text>\r\n        )\r\n    }\r\n\r\n    return(\r\n        <View style={{flex: 1, alignItems: 'center', justifyContent:'center'}}>\r\n            <FlatList \r\n                data = {Unit1}\r\n                renderItem = {({item}) \r\n\r\n                }\r\n            />\r\n            {displayText('This is <b>bold<b> text and another <b>bold<b> text.')}\r\n            {displayText('This is <i>italic<i> text.')}\r\n            {displayText('This is <u>underlined<u> text.')}\r\n        </View>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    bold: {fontWeight: 'bold'},\r\n    italic: {fontStyle: 'italic'},\r\n    underline: {textDecorationLine: 'underline'}\r\n})"]},"metadata":{},"sourceType":"module"}