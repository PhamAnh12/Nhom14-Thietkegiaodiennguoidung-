{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"F:\\\\Projects\\\\App\\\\screens\\\\GuideScreen.js\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Card from \"../components/Card\";\nimport questions from \"../components/questions\";\nexport default function GuideScreen() {\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      index = _useState2[0],\n      setIndex = _useState2[1];\n\n  if (index < questions.length) {\n    return React.createElement(View, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      style: {\n        flex: 1,\n        flexDirection: 'row'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 17\n      }\n    }, questions[index].title), React.createElement(View, {\n      style: styles.answer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 17\n      }\n    }, React.createElement(FlatList, {\n      data: questions[index].options,\n      renderItem: function renderItem(_ref) {\n        var item = _ref.item;\n        return React.createElement(TouchableOpacity, {\n          onPress: function onPress() {\n            return setIndex(index + 1);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 29\n          }\n        }, React.createElement(Card, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 33\n          }\n        }, React.createElement(Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 37\n          }\n        }, item.key)));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 21\n      }\n    })));\n  } else {\n    return React.createElement(View, {\n      style: {\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }\n    }, \"Guide Screen Result\"));\n  }\n}\nvar styles = StyleSheet.create({\n  answer: {}\n});","map":{"version":3,"sources":["F:/Projects/App/screens/GuideScreen.js"],"names":["React","useState","Card","questions","GuideScreen","index","setIndex","length","flex","flexDirection","title","styles","answer","options","item","key","alignItems","justifyContent","StyleSheet","create"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;;;;AAEA,OAAOC,IAAP;AACA,OAAOC,SAAP;AAEA,eAAe,SAASC,WAAT,GAAsB;AAAA,kBACPH,QAAQ,CAAC,CAAD,CADD;AAAA;AAAA,MAC1BI,KAD0B;AAAA,MACnBC,QADmB;;AAGjC,MAAGD,KAAK,GAAGF,SAAS,CAACI,MAArB,EAA4B;AACxB,WACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACC,QAAAA,IAAI,EAAE,CAAP;AAAUC,QAAAA,aAAa,EAAE;AAAzB,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA+CN,SAAS,CAACE,KAAD,CAAT,CAAiBK,KAAhE,CADJ,EAEI,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAEC,MAAM,CAACC,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,QAAD;AACI,MAAA,IAAI,EAAET,SAAS,CAACE,KAAD,CAAT,CAAiBQ,OAD3B;AAEI,MAAA,UAAU,EAAE;AAAA,YAAEC,IAAF,QAAEA,IAAF;AAAA,eACR,oBAAC,gBAAD;AACI,UAAA,OAAO,EAAE;AAAA,mBAAMR,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAd;AAAA,WADb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAGI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAOS,IAAI,CAACC,GAAZ,CADJ,CAHJ,CADQ;AAAA,OAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAFJ,CADJ;AAoBH,GArBD,MAsBK;AACD,WACI,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACP,QAAAA,IAAI,EAAE,CAAP;AAAUQ,QAAAA,UAAU,EAAE,QAAtB;AAAgCC,QAAAA,cAAc,EAAE;AAAhD,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADJ,CADJ;AAKH;AACJ;AAED,IAAMN,MAAM,GAAGO,UAAU,CAACC,MAAX,CAAkB;AAC7BP,EAAAA,MAAM,EAAE;AADqB,CAAlB,CAAf","sourcesContent":["import React, { useState } from 'react'\r\nimport { View, Text, Button, TouchableOpacity, FlatList, StyleSheet } from 'react-native'\r\nimport Card from '../components/Card'\r\nimport questions from '../components/questions'\r\n\r\nexport default function GuideScreen(){\r\n    const [index, setIndex] = useState(0)\r\n\r\n    if(index < questions.length){\r\n        return(\r\n            <View>\r\n                <Text style={{flex: 1, flexDirection: 'row'}}>{questions[index].title}</Text>\r\n                <View style={styles.answer}>\r\n                    <FlatList \r\n                        data={questions[index].options}\r\n                        renderItem={({item}) => (\r\n                            <TouchableOpacity\r\n                                onPress={() => setIndex(index + 1)}\r\n                            >\r\n                                <Card>\r\n                                    <Text>{item.key}</Text>\r\n                                </Card>\r\n                            </TouchableOpacity>\r\n                        )}\r\n                    />    \r\n                </View>\r\n                \r\n            </View>\r\n        )\r\n    }\r\n    else {\r\n        return(\r\n            <View style={{flex: 1, alignItems: 'center', justifyContent: 'center'}}>\r\n                <Text>Guide Screen Result</Text>\r\n            </View>\r\n        )\r\n    }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    answer: {\r\n        \r\n    }\r\n})"]},"metadata":{},"sourceType":"module"}